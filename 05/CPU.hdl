// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */
	//A-instruciton
	//address[0..14]

	//C-instruction
	// 1  1  1  a c1 c2 c3 c4  c5 c6 d1 d2  d3 j1 j2 j3
	//15 14 13 12 11 10  9  8   7  6  5  4  3   2  1  0



CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Start to decode the instruction
    Not(in=instruction[15], out=ainst);
    Not(in=ainst, out=cinst);
    And16(a=instruction, b=true, out[0]=cj3, out[1]=cj2, out[2]=cj1,
                         out[3]=cd3, out[4]=cd2, out[5]=cd1, out[6]=cc6,
                         out[7]=cc5, out[8]=cc4, out[9]=cc3, out[10]=cc2,
                         out[11]=cc1, out[12]=ca);

    //A register
    And(a=cinst, b=cd1, out=computea);
    Mux16(a=instruction, b=alu, sel=instruction[15], out=newa);
    Or(a=ainst, b=computea, out=loada);
    ARegister(in=newa, load=loada, out=a);

    //D register
    And(a=cd2, b=cinst, out=loadd);
    DRegister(in=alu, load=loadd, out=d);

    //ALU
    Mux16(a=a, b=inM, sel=ca, out=aorm);
    And(a=cc1, b=true, out=zx);
    And(a=cc2, b=true, out=nx);
    And(a=cc3, b=true, out=zy);
    And(a=cc4, b=true, out=ny);
    And(a=cc5, b=true, out=f);
    And(a=cc6, b=true, out=no);
    ALU(x=d, y=aorm, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=alu, zr=zr, ng=ng);

    //Jumping conditions
    Not(in=zr, out=nzr);   //Not zero
    Not(in=ng, out=nng);   //not Negative
    And(a=nzr, b=nng, out=pos);   //acutall positive number
    And(a=cj1, b=ng, out=jlt);
    And(a=cj2, b=zr, out=jge);
    And(a=cj3, b=pos, out=jgt);

    Or(a=jlt, b=jge, out=jmp1);   //either less than and equal to zero
    Or(a=jmp1, b=jgt, out=jmp2);  //either all three conditions
    And(a=cinst, b=jmp2, out=jmp); //must be a cinstruction

    //Outputs
    //writeM
    And(a=cinst, b=cd3, out=writeM);
    
    //addressM
    And16(a=a, b=true, out[0..14]=addressM);

    //outM
    And16(a=alu, b=true, out=outM);

    //PC
    PC(in=a, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}
